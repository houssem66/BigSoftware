// <auto-generated />
using System;
using Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Data.Migrations
{
    [DbContext(typeof(BigSoftContext))]
    [Migration("20221028111718_collection")]
    partial class collection
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.4")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Data.Entities.BonCommandeClient", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ClientId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("GrossisteId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<decimal>("PrixTotaleHt")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("PrixTotaleTTc")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("GrossisteId");

                    b.ToTable("BonCommandeClients");
                });

            modelBuilder.Entity("Data.Entities.BonDeCommandeFournisseur", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("FournisseurId")
                        .HasColumnType("int");

                    b.Property<string>("GrossisteId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<decimal>("PrixTotaleHt")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("PrixTotaleTTc")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("FournisseurId");

                    b.HasIndex("GrossisteId");

                    b.ToTable("BonDeCommandeFournisseurs");
                });

            modelBuilder.Entity("Data.Entities.BonDeReceptionFournisseur", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Confirmed")
                        .HasColumnType("bit");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("FournisseurId")
                        .HasColumnType("int");

                    b.Property<string>("GrossisteId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<decimal?>("PrixTotaleHt")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("PrixTotaleTTc")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("FournisseurId");

                    b.HasIndex("GrossisteId");

                    b.ToTable("BonDeRéceptionFournisseurs");
                });

            modelBuilder.Entity("Data.Entities.BonLivraisonClient", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ClientId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("GrossisteId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<decimal>("PrixTotaleHt")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("PrixTotaleTTc")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("GrossisteId");

                    b.ToTable("BonLivraisonClients");
                });

            modelBuilder.Entity("Data.Entities.BonSortie", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ClientId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("GrossisteId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<decimal>("PrixTotaleHt")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("PrixTotaleTTc")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("GrossisteId");

                    b.ToTable("BonSorties");
                });

            modelBuilder.Entity("Data.Entities.Client", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Adresse")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Cin")
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)");

                    b.Property<int>("Civility")
                        .HasColumnType("int");

                    b.Property<string>("CodePostale")
                        .HasMaxLength(4)
                        .HasColumnType("nvarchar(4)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Gouvernorats")
                        .HasColumnType("int");

                    b.Property<string>("IdGrossiste")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Identifiant_fiscale")
                        .HasMaxLength(9)
                        .HasColumnType("nvarchar(9)");

                    b.Property<string>("Nom")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("NumMobile")
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)");

                    b.Property<string>("PhoneBureau")
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)");

                    b.Property<string>("Prenom")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("TypeClient")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("IdGrossiste");

                    b.ToTable("Clients");
                });

            modelBuilder.Entity("Data.Entities.DetailsBonSortie", b =>
                {
                    b.Property<int>("IdProduit")
                        .HasColumnType("int");

                    b.Property<int>("IdBonSortie")
                        .HasColumnType("int");

                    b.Property<decimal>("MontantHt")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("MontantTTc")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Quantite")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("IdProduit", "IdBonSortie");

                    b.HasIndex("IdBonSortie");

                    b.ToTable("DetailsBonSorties");
                });

            modelBuilder.Entity("Data.Entities.DetailsCommandeClient", b =>
                {
                    b.Property<int>("IdProduit")
                        .HasColumnType("int");

                    b.Property<int>("IdCommande")
                        .HasColumnType("int");

                    b.Property<decimal>("MontantHt")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("MontantTTc")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Quantite")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("IdProduit", "IdCommande");

                    b.HasIndex("IdCommande");

                    b.ToTable("DetailsCommandeClients");
                });

            modelBuilder.Entity("Data.Entities.DetailsCommandeFournisseur", b =>
                {
                    b.Property<int>("IdProduit")
                        .HasColumnType("int");

                    b.Property<int>("IdBonCommande")
                        .HasColumnType("int");

                    b.Property<decimal>("MontantHt")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("MontantTTc")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Quantite")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("IdProduit", "IdBonCommande");

                    b.HasIndex("IdBonCommande");

                    b.ToTable("DetailsCommandeFournisseurs");
                });

            modelBuilder.Entity("Data.Entities.DetailsDevis", b =>
                {
                    b.Property<int>("IdProduit")
                        .HasColumnType("int");

                    b.Property<int>("IdDevis")
                        .HasColumnType("int");

                    b.Property<decimal>("MontantHt")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("MontantTTc")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Quantite")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("IdProduit", "IdDevis");

                    b.HasIndex("IdDevis");

                    b.ToTable("DetailsDevis");
                });

            modelBuilder.Entity("Data.Entities.DetailsFactureClient", b =>
                {
                    b.Property<int>("IdProduit")
                        .HasColumnType("int");

                    b.Property<int>("IdFactureClient")
                        .HasColumnType("int");

                    b.Property<decimal>("MontantHt")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("MontantTTc")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Quantite")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("IdProduit", "IdFactureClient");

                    b.HasIndex("IdFactureClient");

                    b.ToTable("DetailsFactureClients");
                });

            modelBuilder.Entity("Data.Entities.DetailsFactureFournisseur", b =>
                {
                    b.Property<int>("IdProduit")
                        .HasColumnType("int");

                    b.Property<int>("IdFacutre")
                        .HasColumnType("int");

                    b.Property<decimal?>("MontantHt")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("MontantTTc")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("Quantite")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("IdProduit", "IdFacutre");

                    b.HasIndex("IdFacutre");

                    b.ToTable("DetailsFactureFournisseurs");
                });

            modelBuilder.Entity("Data.Entities.DetailsLivraisonClient", b =>
                {
                    b.Property<int>("IdProduit")
                        .HasColumnType("int");

                    b.Property<int>("IdBonLivraison")
                        .HasColumnType("int");

                    b.Property<decimal>("MontantHt")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("MontantTTc")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Quantite")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("IdProduit", "IdBonLivraison");

                    b.HasIndex("IdBonLivraison");

                    b.ToTable("DetailsLivraisonClients");
                });

            modelBuilder.Entity("Data.Entities.DetailsReceptionFournisseur", b =>
                {
                    b.Property<int>("IdProduit")
                        .HasColumnType("int");

                    b.Property<int>("IdBonReception")
                        .HasColumnType("int");

                    b.Property<decimal?>("MontantHt")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("MontantTTc")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("Quantite")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("IdProduit", "IdBonReception");

                    b.HasIndex("IdBonReception");

                    b.ToTable("DetailsReceptionFournisseurs");
                });

            modelBuilder.Entity("Data.Entities.Devis", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ClientId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("GrossisteId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<decimal>("PrixTotaleHt")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("PrixTotaleTTc")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("GrossisteId");

                    b.ToTable("Devis");
                });

            modelBuilder.Entity("Data.Entities.Document", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Filepath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GrossisteId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("GrossisteId");

                    b.ToTable("Documents");
                });

            modelBuilder.Entity("Data.Entities.FactureClient", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ClientId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("GrossisteId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<decimal>("PrixTotaleHt")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("PrixTotaleTTc")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("GrossisteId");

                    b.ToTable("FactureClients");
                });

            modelBuilder.Entity("Data.Entities.FactureFournisseur", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BonDeReceptionId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<decimal?>("PrixTotaleHt")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("PrixTotaleTTc")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("BonDeReceptionId")
                        .IsUnique();

                    b.ToTable("FactureFournisseurs");
                });

            modelBuilder.Entity("Data.Entities.Fournisseur", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Adresse")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CodePostale")
                        .HasMaxLength(4)
                        .HasColumnType("nvarchar(4)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("FormeJuridique")
                        .HasColumnType("int");

                    b.Property<int>("Gouvernorats")
                        .HasColumnType("int");

                    b.Property<string>("IdGrossiste")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Identifiant_fiscale")
                        .HasMaxLength(9)
                        .HasColumnType("nvarchar(9)");

                    b.Property<string>("NomPersAContact")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("NumFax")
                        .HasColumnType("int");

                    b.Property<int?>("Numbureau")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<string>("PrenomPersAContact")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RaisonSocial")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SiteWeb")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("IdGrossiste");

                    b.ToTable("Fournisseurs");
                });

            modelBuilder.Entity("Data.Entities.Produit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Barcode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Category")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("PriceHt")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("PriceTTc")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TVA")
                        .HasColumnType("int");

                    b.Property<int>("UnitOfMeasure")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Produits");
                });

            modelBuilder.Entity("Data.Entities.Stock", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("GrossisteId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("StoreName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("GrossisteId");

                    b.ToTable("Stocks");
                });

            modelBuilder.Entity("Data.Entities.StockProduit", b =>
                {
                    b.Property<int>("IdProduit")
                        .HasColumnType("int");

                    b.Property<int>("IdStock")
                        .HasColumnType("int");

                    b.Property<decimal?>("PrixTotaleHt")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("PrixTotaleTTc")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("Quantite")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("IdProduit", "IdStock");

                    b.HasIndex("IdStock");

                    b.ToTable("StockProduits");
                });

            modelBuilder.Entity("Data.Entities.Utilisateur", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Adresse")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Civility")
                        .HasColumnType("int");

                    b.Property<string>("CodePostale")
                        .HasMaxLength(4)
                        .HasColumnType("nvarchar(4)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<int>("Gouvernorats")
                        .HasColumnType("int");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Nom")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<int?>("NumMobile")
                        .HasColumnType("int");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("Prenom")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Utilisateur");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Data.Entities.Grossiste", b =>
                {
                    b.HasBaseType("Data.Entities.Utilisateur");

                    b.Property<string>("EmailPersAContact")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Identifiant_fiscale")
                        .HasMaxLength(9)
                        .HasColumnType("nvarchar(9)");

                    b.Property<string>("NomPersAContact")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("NumFax")
                        .HasColumnType("int");

                    b.Property<int?>("Numbureau")
                        .HasColumnType("int");

                    b.Property<string>("PrenomPersAContact")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RaisonSocial")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Rib")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("SiteWeb")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Verified")
                        .HasColumnType("bit");

                    b.HasDiscriminator().HasValue("Grossiste");
                });

            modelBuilder.Entity("Data.Entities.BonCommandeClient", b =>
                {
                    b.HasOne("Data.Entities.Client", "Client")
                        .WithMany("BonCommandeClients")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Entities.Grossiste", "Grossiste")
                        .WithMany()
                        .HasForeignKey("GrossisteId");

                    b.Navigation("Client");

                    b.Navigation("Grossiste");
                });

            modelBuilder.Entity("Data.Entities.BonDeCommandeFournisseur", b =>
                {
                    b.HasOne("Data.Entities.Fournisseur", "Fournisseur")
                        .WithMany("BonDeCommandes")
                        .HasForeignKey("FournisseurId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Entities.Grossiste", "Grossiste")
                        .WithMany()
                        .HasForeignKey("GrossisteId");

                    b.Navigation("Fournisseur");

                    b.Navigation("Grossiste");
                });

            modelBuilder.Entity("Data.Entities.BonDeReceptionFournisseur", b =>
                {
                    b.HasOne("Data.Entities.Fournisseur", "Fournisseur")
                        .WithMany("BonDeReceptions")
                        .HasForeignKey("FournisseurId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Entities.Grossiste", "Grossiste")
                        .WithMany()
                        .HasForeignKey("GrossisteId");

                    b.Navigation("Fournisseur");

                    b.Navigation("Grossiste");
                });

            modelBuilder.Entity("Data.Entities.BonLivraisonClient", b =>
                {
                    b.HasOne("Data.Entities.Client", "Client")
                        .WithMany("BonLivraisonClients")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Entities.Grossiste", "Grossiste")
                        .WithMany()
                        .HasForeignKey("GrossisteId");

                    b.Navigation("Client");

                    b.Navigation("Grossiste");
                });

            modelBuilder.Entity("Data.Entities.BonSortie", b =>
                {
                    b.HasOne("Data.Entities.Client", "Client")
                        .WithMany("BonSorties")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Entities.Grossiste", "Grossiste")
                        .WithMany()
                        .HasForeignKey("GrossisteId");

                    b.Navigation("Client");

                    b.Navigation("Grossiste");
                });

            modelBuilder.Entity("Data.Entities.Client", b =>
                {
                    b.HasOne("Data.Entities.Grossiste", "Grossiste")
                        .WithMany("Clients")
                        .HasForeignKey("IdGrossiste")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Grossiste");
                });

            modelBuilder.Entity("Data.Entities.DetailsBonSortie", b =>
                {
                    b.HasOne("Data.Entities.BonSortie", "BonSortie")
                        .WithMany("DetailsBonSorties")
                        .HasForeignKey("IdBonSortie")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Entities.Produit", "Produit")
                        .WithMany("DetailsBonSorties")
                        .HasForeignKey("IdProduit")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BonSortie");

                    b.Navigation("Produit");
                });

            modelBuilder.Entity("Data.Entities.DetailsCommandeClient", b =>
                {
                    b.HasOne("Data.Entities.BonCommandeClient", "CommandeClient")
                        .WithMany("DetailsCommandes")
                        .HasForeignKey("IdCommande")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Entities.Produit", "Produit")
                        .WithMany("DetailsCommandeClients")
                        .HasForeignKey("IdProduit")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CommandeClient");

                    b.Navigation("Produit");
                });

            modelBuilder.Entity("Data.Entities.DetailsCommandeFournisseur", b =>
                {
                    b.HasOne("Data.Entities.BonDeCommandeFournisseur", "BonDeCommandeFournisseur")
                        .WithMany("DetailsCommandes")
                        .HasForeignKey("IdBonCommande")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Entities.Produit", "Produit")
                        .WithMany("DetailsCommandes")
                        .HasForeignKey("IdProduit")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BonDeCommandeFournisseur");

                    b.Navigation("Produit");
                });

            modelBuilder.Entity("Data.Entities.DetailsDevis", b =>
                {
                    b.HasOne("Data.Entities.Devis", "Devis")
                        .WithMany("DetailsDevis")
                        .HasForeignKey("IdDevis")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Entities.Produit", "Produit")
                        .WithMany("DetailsDevis")
                        .HasForeignKey("IdProduit")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Devis");

                    b.Navigation("Produit");
                });

            modelBuilder.Entity("Data.Entities.DetailsFactureClient", b =>
                {
                    b.HasOne("Data.Entities.FactureClient", "FactureClient")
                        .WithMany("DetailsFactures")
                        .HasForeignKey("IdFactureClient")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Entities.Produit", "Produit")
                        .WithMany("DetailsFactureClients")
                        .HasForeignKey("IdProduit")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FactureClient");

                    b.Navigation("Produit");
                });

            modelBuilder.Entity("Data.Entities.DetailsFactureFournisseur", b =>
                {
                    b.HasOne("Data.Entities.FactureFournisseur", "FactureFournisseur")
                        .WithMany("DetailsFactures")
                        .HasForeignKey("IdFacutre")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Entities.Produit", "Produit")
                        .WithMany("DetailsFactures")
                        .HasForeignKey("IdProduit")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FactureFournisseur");

                    b.Navigation("Produit");
                });

            modelBuilder.Entity("Data.Entities.DetailsLivraisonClient", b =>
                {
                    b.HasOne("Data.Entities.BonLivraisonClient", "BonLivraison")
                        .WithMany("DetailsLivraisons")
                        .HasForeignKey("IdBonLivraison")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Entities.Produit", "Produit")
                        .WithMany("DetailsLivraisons")
                        .HasForeignKey("IdProduit")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BonLivraison");

                    b.Navigation("Produit");
                });

            modelBuilder.Entity("Data.Entities.DetailsReceptionFournisseur", b =>
                {
                    b.HasOne("Data.Entities.BonDeReceptionFournisseur", "BonDeRéception")
                        .WithMany("DetailsReceptions")
                        .HasForeignKey("IdBonReception")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Entities.Produit", "Produit")
                        .WithMany("DetailsReceptions")
                        .HasForeignKey("IdProduit")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BonDeRéception");

                    b.Navigation("Produit");
                });

            modelBuilder.Entity("Data.Entities.Devis", b =>
                {
                    b.HasOne("Data.Entities.Client", "Client")
                        .WithMany("Devis")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Entities.Grossiste", "Grossiste")
                        .WithMany()
                        .HasForeignKey("GrossisteId");

                    b.Navigation("Client");

                    b.Navigation("Grossiste");
                });

            modelBuilder.Entity("Data.Entities.Document", b =>
                {
                    b.HasOne("Data.Entities.Grossiste", "Grossiste")
                        .WithMany("Documents")
                        .HasForeignKey("GrossisteId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Grossiste");
                });

            modelBuilder.Entity("Data.Entities.FactureClient", b =>
                {
                    b.HasOne("Data.Entities.Client", "Client")
                        .WithMany("FactureClients")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Entities.Grossiste", "Grossiste")
                        .WithMany()
                        .HasForeignKey("GrossisteId");

                    b.Navigation("Client");

                    b.Navigation("Grossiste");
                });

            modelBuilder.Entity("Data.Entities.FactureFournisseur", b =>
                {
                    b.HasOne("Data.Entities.BonDeReceptionFournisseur", "BonDeReceptionFournisseur")
                        .WithOne("FactureFournisseur")
                        .HasForeignKey("Data.Entities.FactureFournisseur", "BonDeReceptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BonDeReceptionFournisseur");
                });

            modelBuilder.Entity("Data.Entities.Fournisseur", b =>
                {
                    b.HasOne("Data.Entities.Grossiste", "Grossiste")
                        .WithMany()
                        .HasForeignKey("IdGrossiste");

                    b.Navigation("Grossiste");
                });

            modelBuilder.Entity("Data.Entities.Stock", b =>
                {
                    b.HasOne("Data.Entities.Grossiste", "Grossiste")
                        .WithMany("Stocks")
                        .HasForeignKey("GrossisteId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Grossiste");
                });

            modelBuilder.Entity("Data.Entities.StockProduit", b =>
                {
                    b.HasOne("Data.Entities.Produit", "Produit")
                        .WithMany("StockProduit")
                        .HasForeignKey("IdProduit")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Entities.Stock", "Stock")
                        .WithMany("StockProduit")
                        .HasForeignKey("IdStock")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Produit");

                    b.Navigation("Stock");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Data.Entities.Utilisateur", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Data.Entities.Utilisateur", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Entities.Utilisateur", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Data.Entities.Utilisateur", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Data.Entities.BonCommandeClient", b =>
                {
                    b.Navigation("DetailsCommandes");
                });

            modelBuilder.Entity("Data.Entities.BonDeCommandeFournisseur", b =>
                {
                    b.Navigation("DetailsCommandes");
                });

            modelBuilder.Entity("Data.Entities.BonDeReceptionFournisseur", b =>
                {
                    b.Navigation("DetailsReceptions");

                    b.Navigation("FactureFournisseur");
                });

            modelBuilder.Entity("Data.Entities.BonLivraisonClient", b =>
                {
                    b.Navigation("DetailsLivraisons");
                });

            modelBuilder.Entity("Data.Entities.BonSortie", b =>
                {
                    b.Navigation("DetailsBonSorties");
                });

            modelBuilder.Entity("Data.Entities.Client", b =>
                {
                    b.Navigation("BonCommandeClients");

                    b.Navigation("BonLivraisonClients");

                    b.Navigation("BonSorties");

                    b.Navigation("Devis");

                    b.Navigation("FactureClients");
                });

            modelBuilder.Entity("Data.Entities.Devis", b =>
                {
                    b.Navigation("DetailsDevis");
                });

            modelBuilder.Entity("Data.Entities.FactureClient", b =>
                {
                    b.Navigation("DetailsFactures");
                });

            modelBuilder.Entity("Data.Entities.FactureFournisseur", b =>
                {
                    b.Navigation("DetailsFactures");
                });

            modelBuilder.Entity("Data.Entities.Fournisseur", b =>
                {
                    b.Navigation("BonDeCommandes");

                    b.Navigation("BonDeReceptions");
                });

            modelBuilder.Entity("Data.Entities.Produit", b =>
                {
                    b.Navigation("DetailsBonSorties");

                    b.Navigation("DetailsCommandeClients");

                    b.Navigation("DetailsCommandes");

                    b.Navigation("DetailsDevis");

                    b.Navigation("DetailsFactureClients");

                    b.Navigation("DetailsFactures");

                    b.Navigation("DetailsLivraisons");

                    b.Navigation("DetailsReceptions");

                    b.Navigation("StockProduit");
                });

            modelBuilder.Entity("Data.Entities.Stock", b =>
                {
                    b.Navigation("StockProduit");
                });

            modelBuilder.Entity("Data.Entities.Grossiste", b =>
                {
                    b.Navigation("Clients");

                    b.Navigation("Documents");

                    b.Navigation("Stocks");
                });
#pragma warning restore 612, 618
        }
    }
}
